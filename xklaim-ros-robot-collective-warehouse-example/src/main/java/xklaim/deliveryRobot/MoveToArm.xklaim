package xklaim.deliveryRobot

import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.ObjectMapper
import messages.PoseStamped
import messages.PoseWithCovarianceStamped
import klava.Locality
import ros.Publisher
import ros.RosBridge
import ros.SubscriptionRequestMsg
import ros.msgs.geometry_msgs.Twist

proc MoveToArm(String rosbridgeWebsocketURI,String robotId,Locality Arm) {
	// Coordinates of the arm robot (notably, the arm robot has a fixed position)  
	val x = -0.22
	val y = 0.34

	// create the bridge and connect it to the ROS bridge
	val bridge = new RosBridge()
	bridge.connect(rosbridgeWebsocketURI, true)
	in("itemReadyForTheDelivery", var String itemType)@Arm
	
//allocation problem 	
    switch (itemType) {
    case "typeA":
    robotId="robot1"
    case "typeB":
    robotId="robot2"
    case "typeC":
    robotId="robot1"
    case "typeD":
    robotId="robot2"
    }

	// initialize a publisher for the topic related to the control of the robot's wheels
	val pub = new Publisher("/" + robotId + "/move_base_simple/goal", "geometry_msgs/PoseStamped", bridge)

	// wait for a call by the arm robot

	// publish the destination position
	val destination = new PoseStamped().headerFrameId("world").posePositionXY(x, y).poseOrientation(1.0)
	pub.publish(destination)

	// waiting until the destination position is reached
	bridge.subscribe(
		SubscriptionRequestMsg.generate("/" + robotId + "/amcl_pose").setType(
			"geometry_msgs/PoseWithCovarianceStamped").setThrottleRate(1).setQueueLength(1),
		[ data, stringRep |
			// extract the actual position from the delivery robot's status	
			var mapper = new ObjectMapper()
			var JsonNode rosMsgNode = data.get("msg")
			var PoseWithCovarianceStamped current_position = mapper.treeToValue(rosMsgNode, PoseWithCovarianceStamped)

			// calculate the delta between the actual position and the destination position
			// to measure the completeness of the movement
			val tolerance = 0.16
			var deltaX = current_position.pose.pose.position.x - destination.pose.position.x
			var deltaY = current_position.pose.pose.position.y - destination.pose.position.y
			if (deltaX <= tolerance && deltaY <= tolerance) {
				// the robot arrived to destination
				// stop the robot movement
				val pubvel = new Publisher("/" + robotId + "/cmd_vel", "geometry_msgs/Twist", bridge)
				val twistMsg = new Twist()
				pubvel.publish(twistMsg)

				// notify that is ready to receive the item
				out("ready")@Arm
				// unsubscribe from the robot state topic
				bridge.unsubscribe("/" + robotId + "/amcl_pose")
			}
		]
	)
}