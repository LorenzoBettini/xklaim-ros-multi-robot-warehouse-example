package xklaim.deliveryRobot

import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.ObjectMapper
import java.PoseStamped
import java.PoseWithCovarianceStamped
import klava.Locality
import ros.Publisher
import ros.RosBridge
import ros.SubscriptionRequestMsg
import ros.msgs.geometry_msgs.Twist

proc MovetoArm(String rosbridgeWebsocketURI,Locality arm) {

	// create the bridge and connect it to the ROS bridge
	val bridge = new RosBridge()
	bridge.connect(rosbridgeWebsocketURI, true)

	// initialize a publisher for the topic related to the control of the robot's wheels
	val pub = new Publisher("/robot1/move_base_simple/goal", "geometry_msgs/PoseStamped", bridge)

	// wait for a call by the arm robot, which includes the destination position
	in("comeHere", var Double x, var Double y, var Double w)@self

	// publish the destination position
	val destination = new PoseStamped().headerFrameId("world").posePositionXY(x, y).poseOrientation(w)
	pub.publish(destination)

	// waiting until the destination position is reached
	bridge.subscribe(
		SubscriptionRequestMsg.generate("/robot1/amcl_pose").setType("geometry_msgs/PoseWithCovarianceStamped").
			setThrottleRate(1).setQueueLength(1),
		[ data, stringRep |
			// extract the actual position from the delivery robot's status	
			var mapper = new ObjectMapper()
			var JsonNode rosMsgNode = data.get("msg")
			var PoseWithCovarianceStamped current_position = mapper.treeToValue(rosMsgNode, PoseWithCovarianceStamped)

			// calculate the delta between the actual position and the destination position
			// to measure the completeness of the movement
			val tolerance = 0.16
			var deltaX = current_position.pose.pose.position.x - destination.pose.position.x
			var deltaY = current_position.pose.pose.position.y - destination.pose.position.y

			if (deltaX <= tolerance && deltaY <= tolerance) {
				// the robot arrived to destination
				
				// stop the robot movement
				val pubvel = new Publisher("/robot1/cmd_vel", "geometry_msgs/Twist", bridge)
				val twistMsg = new Twist()
				pubvel.publish(twistMsg)
				
				// notify that is ready to receive the item
				out("ready")@arm
				// unsubscribe from the robot state topic
				bridge.unsubscribe("/robot1/amcl_pose")
			}
		]
	)
}
