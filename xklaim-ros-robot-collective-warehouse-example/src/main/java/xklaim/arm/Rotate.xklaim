package xklaim.arm

import messages.JointTrajectory
import messages.XklaimToRosConnection
import ros.Publisher
import ros.SubscriptionRequestMsg

proc Rotate(String rosbridgeWebsocketURI, String sector) {
	val local = self

	// connect to the ROS bridge
	val bridge = new XklaimToRosConnection(rosbridgeWebsocketURI)

	// initialize a publisher for the topic related to the control of the arm movements
	val pub = new Publisher("/arm_controller/command", "trajectory_msgs/JointTrajectory", bridge)

	// set joint positions for performing the rotate movement of the arm
	val jointPositions = #[-0.9546, -0.20, -0.7241, 3.1400, 1.6613, -0.0142]
	val JointTrajectory rotateTrajectory = new JointTrajectory().positions(jointPositions).jointNames(#[
		"joint1",
		"joint2",
		"joint3",
		"joint4",
		"joint5",
		"joint6"
	])

	// wait for the completion of the get up movement
	in("getUpCompleted")@self

	// call for a delivery robot
	out("itemReadyForTheDelivery",sector)@self

	// publish the trajectory to rotate the arm	 
	pub.publish(rotateTrajectory)

	// subscribe to the topic providing the actual status of the arm 
	bridge.subscribe(
		SubscriptionRequestMsg.generate("/arm_controller/state").setType("control_msgs/JointTrajectoryControllerState").
			setThrottleRate(1).setQueueLength(1),
		[ data, stringRep |
			// extract the actual joint positions from the gripper's status	
			val actual = data.get("msg").get("actual").get("positions")

			// calculate the delta between the actual joint positions and the destination positions
			// to measure the completeness of the gripper movement
			var delta = 0.0
			val tolerance = 0.008
			for (var i = 0; i < jointPositions.size; i++) {
				delta += Math.pow(actual.get(i).asDouble() - jointPositions.get(i), 2.0)
			}
			val norm = Math.sqrt(delta)

			if (norm <= tolerance) { /* the arm has completed the rotation movement */
				// activate the get up process
				out("rotationCompleted")@local

				// unsubscribe from the arm state topic
				bridge.unsubscribe("/arm_controller/state")
			}
		]
	)
}
