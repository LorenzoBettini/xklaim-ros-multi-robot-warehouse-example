package xklaim.arm

import java.JointTrajectory
import ros.Publisher
import ros.RosBridge
import ros.SubscriptionRequestMsg

proc GetUp(String rosbridgeWebsocketURI) {
	val local = self

	// create the bridge and connect it to the ROS bridge
	val bridge = new RosBridge()
	bridge.connect(rosbridgeWebsocketURI, true)

	// initialize a publisher for the topic related to the control of the arm movements
	val pub = new Publisher("/arm_controller/command", "trajectory_msgs/JointTrajectory", bridge)

	// set joint positions for performing the get up movement of the arm
	val jointPositions = #[-3.1415, -0.2862, -0.5000, 3.1400, 1.6613, -0.0142]
	val JointTrajectory getUpJointTrajectory = new JointTrajectory().positions(jointPositions).jointNames(#[
		"joint1",
		"joint2",
		"joint3",
		"joint4",
		"joint5",
		"joint6"
	])

	// wait for the completion of the grip
	in("gripCompleted")@self

	// publish the trajectory to move up the arm	 
	pub.publish(getUpJointTrajectory)

	// subscribe to the topic providing the actual status of the gripper 
	bridge.subscribe(
		SubscriptionRequestMsg.generate("/arm_controller/state").setType("control_msgs/JointTrajectoryControllerState").
			setThrottleRate(1).setQueueLength(1),
		[ data, stringRep |
			// extract the actual joint positions from the arm's status	
			val actual = data.get("msg").get("actual").get("positions")

			// calculate the delta between the actual joint positions and the destination positions
			// to measure the completeness of the arm movement
			var delta = 0.0
			val tolerance = 0.008
			for (var i = 0; i < jointPositions.size; i++) {
				delta += Math.pow(actual.get(i).asDouble() - jointPositions.get(i), 2.0)
			}
			val norm = Math.sqrt(delta)

			if (norm <= tolerance) {
				// the arm has completed the grip movement
				
				// activate the rotate process
				out("getUpCompleted")@local

				// unsubscribe from the arm state topic
				bridge.unsubscribe("/arm_controller/state")
			}
		]
	)
}
