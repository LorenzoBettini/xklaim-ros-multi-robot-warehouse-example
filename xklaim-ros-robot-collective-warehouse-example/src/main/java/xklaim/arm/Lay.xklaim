package xklaim.arm

import messages.JointTrajectory
import ros.Publisher
import ros.RosBridge
import ros.SubscriptionRequestMsg

proc Lay(String rosbridgeWebsocketURI) {
	val local = self

	// Create the bridge and connect it to the ROS bridge
	val bridge = new RosBridge()
	bridge.connect(rosbridgeWebsocketURI, true)

	// Initialize a publisher for the topic related to the control of the robot's arm
	val pub = new Publisher("/arm_controller/command", "trajectory_msgs/JointTrajectory", bridge);

	// wait for the completion of the rotation 
	in("rotationCompleted")@self

	// wait for the arrival of the delivery robot
	in("ready")@self

	val jointPositions = #[
		5.328,
		-0.0097,
		-0.9513,
		3.1400,
		1.7749,
		-0.0142
	]
	val JointTrajectory layTrajectory = new JointTrajectory().positions(jointPositions).jointNames(#[
		"joint1",
		"joint2",
		"joint3",
		"joint4",
		"joint5",
		"joint6"
	]);
	pub.publish(layTrajectory);

	bridge.subscribe(
		SubscriptionRequestMsg.generate("/arm_controller/state").setType("control_msgs/JointTrajectoryControllerState").
			setThrottleRate(1).setQueueLength(1),
		[ data, stringRep |
			val actual = data.get("msg").get("actual").get("positions")
			var delta = 0.0
			val tolerance = 0.001
			for (var i = 0; i < 6; i = i + 1) {
				delta += Math.pow(actual.get(i).asDouble() - jointPositions.get(i), 2.0)
			}
			val norm = Math.sqrt(delta)

			if (norm <= tolerance) {
				out("layCompleted")@local
				bridge.unsubscribe("/arm_controller/state")
			}
		]
	)
}
