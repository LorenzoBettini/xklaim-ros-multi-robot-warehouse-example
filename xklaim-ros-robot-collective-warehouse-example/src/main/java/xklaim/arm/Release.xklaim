package xklaim.arm

import messages.JointTrajectory
import messages.XklaimToRosConnection
import ros.Publisher
import ros.SubscriptionRequestMsg

proc Release(String rosbridgeWebsocketURI,String itemId,String itemType) {
	val local = self

	// connect to the ROS bridge
	val bridge = new XklaimToRosConnection(rosbridgeWebsocketURI)

	// wait for the completion of the lay movement
	in("layCompleted")@self

	// initialize a publisher for the topic related to the control of the gripper
	val pub = new Publisher("/gripper_controller/command", "trajectory_msgs/JointTrajectory", bridge);

	// set joint positions for performing the lay movement
	val jointPositions = #[0.0, 0.0]
	val JointTrajectory openGripperTrajectory = new JointTrajectory().positions(jointPositions).jointNames(#[
		"f_joint1",
		"f_joint2"
	]);

	// publish the trajectory to open the gripper for releasing the item 
	pub.publish(openGripperTrajectory)

	// subscribe to the topic providing the actual status of the gripper 
	bridge.subscribe(
		SubscriptionRequestMsg.generate("/gripper_controller/state").setType(
			"control_msgs/JointTrajectoryControllerState").setThrottleRate(1).setQueueLength(1),
		[ data, stringRep |
			// extract the actual joint positions from the arm's status
			val actual = data.get("msg").get("actual").get("positions")

			// calculate the delta between the actual joint positions and the destination positions
			// to measure the completeness of the gripper movement
			var delta = 0.0
			val tolerance = 0.0008
			for (var i = 0; i < jointPositions.size; i = i + 1) {
				delta += Math.pow(actual.get(i).asDouble() - jointPositions.get(i), 2.0)
			}
			val norm = Math.sqrt(delta)

			if (norm <= tolerance) { /* the gripper is completely opened */
				// inform the delivery robot that the gripper is opened and communicate the item id and type
				out("gripperOpened",itemId,itemType)@local
				
				// activate the GoToInitialPosition process
				out("releaseCompleted")@local

				// unsubscribe from the griper state topic
				bridge.unsubscribe("/gripper_controller/state")
			}
		]
	)
}
